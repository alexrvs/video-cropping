require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V1::VideosController, type: :api do

  # This should return the minimal set of attributes required to create a valid
  # Video. As you add validations to Video, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip('Add a hash of attributes valid for your model')
  }

  let(:invalid_attributes) {
    skip('Add a hash of attributes invalid for your model')
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VideosController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'POST create' do
    context 'user authenticated' do
      before(:each) do
        auth_as_a_valid_user
      end

      context 'with valid params' do
        before do
          @params = {
            'video' => {
              'start_time_trim' => 10,
              'end_time_trim' => 70,
              'input_video' => fixture_file_upload("#{Rails.root}/spec/fixtures/videos/nature.mp4", 'video/mp4')
            }
          }
        end

        it 'should create video and return json data of created video' do
          expect{ post 'api/v1/video.json', @params, @auth_params }.to change {@user.videos.count }.by(1)

          expect(last_response).to equal(201)

          expect(JSON.parse(last_response.body)['start_time_trim']).to equal @params['video']['start_time_trim']
          expect(JSON.parse(last_response.body)['end_time_trim']).to equal @params['video']['end_time_trim']

          expect(JSON.parse(last_response.body)['status']).to equal 'scheduled'

          video = @user.video.last

          expect(JSON.parse(last_response.body)['input_video']['url']).to equal video.input_video.url

        end

      end
    end
  end




end
